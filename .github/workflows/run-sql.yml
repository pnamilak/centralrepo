name: Run SQL from Multiple Repos

on:
  workflow_dispatch:
    inputs:
      repo_names:
        description: 'Comma-separated repo names (e.g. sqlrepo1,sqlrepo2)'
        required: true
      branch_name:
        description: 'Branch to pull from (e.g. main)'
        required: true

jobs:
  run-sql:
    runs-on: self-hosted

    env:
      SQL_SERVER: ${{ secrets.SQL_SERVER }}
      SQL_USER: ${{ secrets.SQL_USER }}
      SQL_PASS: ${{ secrets.SQL_PASS }}
      CENTRAL_PAT: ${{ secrets.CENTRAL_PAT }}

    steps:
      - name: Run SQL scripts from changed files
        shell: powershell
        run: |
          $repos = "${{ github.event.inputs.repo_names }}".Split(',')
          $branch = "${{ github.event.inputs.branch_name }}"

          foreach ($repo in $repos) {
            $repo = $repo.Trim()
            Write-Host "`n==================="
            Write-Host "Cloning $repo on branch $branch"
            Write-Host "==================="

            git clone --branch $branch https://x-access-token:${env:CENTRAL_PAT}@github.com/pnamilak/$repo.git temp-$repo
            Set-Location temp-$repo

            # Get last two commits
            $lastTwoCommits = git rev-list --max-count=2 HEAD
            $commitArray = $lastTwoCommits -split "`n"
            $newestCommit = $commitArray[0]
            $previousCommit = $commitArray[1]

            Write-Host "Comparing commits $previousCommit to $newestCommit"

            $changedFiles = git diff --name-only $previousCommit $newestCommit | Where-Object { $_ -like "*.sql" }

            if (-not $changedFiles) {
              Write-Host "No .sql files changed in last commit(s) of $repo"
            } else {
              foreach ($file in $changedFiles) {
                if (Test-Path $file) {
                  Write-Host "Executing $file..."
                  & sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASS" -i "$file"
                } else {
                  Write-Host "File $file not found. Skipping."
                }
              }
            }

            Set-Location ..
            Remove-Item -Recurse -Force "temp-$repo"
          }
