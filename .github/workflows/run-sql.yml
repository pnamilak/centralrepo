name: Run SQL from Multiple Repos

on:
  workflow_dispatch:
    inputs:
      repo_names:
        description: 'Comma-separated repo names (e.g. sqlrepo1,sqlrepo2)'
        required: true
      branch_name:
        description: 'Branch to pull from (e.g. main)'
        required: true

jobs:
  run-sql:
    runs-on: self-hosted

    env:
      SQL_SERVER: ${{ secrets.SQL_SERVER }}
      SQL_USER: ${{ secrets.SQL_USER }}
      SQL_PASS: ${{ secrets.SQL_PASS }}
      CENTRAL_PAT: ${{ secrets.CENTRAL_PAT }}

    steps:
      - name: Run AutomationSQLscripts_Github.ps1 across changed files
        shell: powershell
        run: |
          $repos = "${{ github.event.inputs.repo_names }}".Split(',')
          $branch = "${{ github.event.inputs.branch_name }}"

          foreach ($repo in $repos) {
            $repo = $repo.Trim()
            Write-Host "`n==================="
            Write-Host "Cloning $repo on branch $branch"
            Write-Host "==================="

            git clone --branch $branch https://x-access-token:${env:CENTRAL_PAT}@github.com/pnamilak/$repo.git temp-$repo
            Set-Location temp-$repo

            $changedFiles = git log --name-only --pretty="" -n 5 | Where-Object { $_ -like '*.sql' } | Select-Object -Unique
            Write-Host "Detected SQL files in last 5 commits:"; $changedFiles | ForEach-Object { Write-Host " - $_" }

            $tempLogFolder = Join-Path $env:GITHUB_WORKSPACE "log-$repo"
            New-Item -ItemType Directory -Force -Path $tempLogFolder | Out-Null

            foreach ($file in $changedFiles) {
              if (Test-Path $file) {
                $scriptFolder = Split-Path $file -Parent
                Write-Host "Running AutomationSQLscripts_Github.ps1 for: $file"
                & "${{ github.workspace }}\AutomationSQLscripts_Github.ps1" `
                  -scriptFolder $scriptFolder `
                  -logFolder $tempLogFolder `
                  -sqlServer "$env:SQL_SERVER" `
                  -sqlUser "$env:SQL_USER" `
                  -sqlPassword "$env:SQL_PASS" `
                  -changeNumber "Manual-Run" `
                  -buildNumber "$repo-$(Get-Date -Format 'yyyyMMddHHmmss')"
              } else {
                Write-Host "Skipping missing file: $file"
              }
            }

            Set-Location ..
            Remove-Item -Recurse -Force "temp-$repo"
          }
